{"version":3,"sources":["cssUtils/mediaBreakpoints.js","components/Card.tsx","factoryFunctions/characterFactory.tsx","components/Scoreboard.tsx","assets/catOne.jpeg","assets/catTwo.jpeg","assets/catThree.jpeg","assets/catFour.jpeg","assets/catFive.jpeg","assets/catSix.jpeg","assets/catSeven.jpeg","assets/catEight.jpeg","assets/catNine.jpeg","assets/catTen.jpeg","assets/catEleven.jpeg","assets/catTwelve.jpeg","assets/catThirteen.jpeg","assets/catFourteen.jpeg","assets/catFifteen.jpeg","components/Gameboard.tsx","App.js","index.js"],"names":["mediaBreakPoint","mobile","CardContainer","styled","Grid","BackgroundImageDiv","div","props","picture","Card","container","item","textAlign","display","boxShadow","mb","onClick","handleCharacterClick","character","Typography","variant","m","name","createCharacter","charName","pictureUrl","ScoreboardContainer","CenteredGridMobile","Scoreboard","direction","p","mx","sm","currentScore","bestScore","Gameboard","useState","arrayOfCharacters","setArrayOfCharacters","useEffect","uhtred","catOne","beocca","catTwo","leofric","catThree","alfred","catFour","brida","catFive","mildrith","catSix","iseult","CatSeven","aelswith","catEight","ragnar","catNine","ubba","catTen","hild","catEleven","Sihtric","catTwelve","Osferth","catThirteen","Eadith","catFourteen","Aldhelm","catFifteen","tempArray","push","chosenCharacters","setChosenCharacters","cardsToDisplay","setCardsToDisplay","clickedCharacters","setClickedCharacters","latestClickedChar","setLastestClickedChar","setCurrentScore","setBestScore","char","length","possibleIndexes","pickedIndexes","randomChosenCharacters","desiredCharacters","pickRandomIndex","Math","floor","random","indexToRemove","indexOf","splice","forEach","index","tempCards","map","xs","updateScreen","undefined","some","concat","Box","justifyContent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5845a814.chunk.js","sourcesContent":["const mediaBreakPoint = {\n  mobile: \"@media screen and (max-width: 599px)\",\n};\n\nexport default mediaBreakPoint;\n","import { Char } from \"../types/customTypes\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport styled from \"@emotion/styled\";\nimport mediaBreakPoint from \"../cssUtils/mediaBreakpoints\";\n\ntype bgImageProps = {\n  picture: any;\n};\n\nconst CardContainer = styled(Grid)`\n  background-color: whitesmoke;\n  border: 5px solid transparent;\n  &:hover {\n    background-color: pink;\n    border: 5px solid pink;\n    cursor: pointer;\n  }\n`;\n\nconst BackgroundImageDiv = styled.div<bgImageProps>`\n  background-image: url(${(props) => props.picture});\n  background-position: center;\n  background-size: cover;\n  height: 180px;\n  ${mediaBreakPoint.mobile} {\n    height: 100px;\n  }\n`;\n\ninterface CardProps {\n  character: Char;\n  handleCharacterClick: Function;\n}\n\nconst Card = (props: CardProps) => {\n  return (\n    <CardContainer\n      container\n      item\n      textAlign=\"center\"\n      display=\"block\"\n      boxShadow={10}\n      mb={2}\n      onClick={() => props.handleCharacterClick(props.character)}\n    >\n      <Grid item>\n        <Typography variant=\"h6\" m={\"auto\"}>\n          {props.character.name}\n        </Typography>\n      </Grid>\n      <BackgroundImageDiv\n        picture={props.character.picture}\n      ></BackgroundImageDiv>\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import { Char } from \"../types/customTypes\";\n\nconst createCharacter = (charName: string, pictureUrl: string): Char => {\n  return {\n    name: charName,\n    picture: pictureUrl,\n  };\n};\n\nexport default createCharacter;\n","import { Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport styled from \"@emotion/styled\";\nimport mediaBreakPoint from \"../cssUtils/mediaBreakpoints\";\n\nconst ScoreboardContainer = styled(Grid)`\n  background-color: pink;\n`;\nconst CenteredGridMobile = styled(Grid)`\n  justify-content: end;\n  ${mediaBreakPoint.mobile} {\n    justify-content: center !important;\n    margin: 0 auto;\n  }\n`;\n\ninterface ScoreboardProps {\n  currentScore: number;\n  bestScore: number;\n}\n\nconst Scoreboard = (props: ScoreboardProps) => {\n  return (\n    <ScoreboardContainer\n      container\n      item\n      direction=\"row\"\n      boxShadow={10}\n      p={1}\n      mx=\"auto\"\n      mb={4}\n    >\n      <Grid container item direction=\"row\" m={1}>\n        <CenteredGridMobile item m={1} mb={0} sm={2}>\n          <Typography variant=\"h5\">CatMemory!</Typography>\n        </CenteredGridMobile>\n        <CenteredGridMobile container item m={1} mb={0} sm={9}>\n          <Grid item>\n            <Typography variant=\"h5\" textAlign=\"center\">\n              Score: {props.currentScore}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" textAlign=\"center\" mx={2}>\n              |\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" textAlign=\"center\">\n              Best: {props.bestScore}/15\n            </Typography>\n          </Grid>\n        </CenteredGridMobile>\n      </Grid>\n    </ScoreboardContainer>\n  );\n};\n\nexport default Scoreboard;\n","export default __webpack_public_path__ + \"static/media/catOne.d6ece169.jpeg\";","export default __webpack_public_path__ + \"static/media/catTwo.27191850.jpeg\";","export default __webpack_public_path__ + \"static/media/catThree.5a6c47f1.jpeg\";","export default __webpack_public_path__ + \"static/media/catFour.b9ed3abe.jpeg\";","export default __webpack_public_path__ + \"static/media/catFive.bbe6989e.jpeg\";","export default __webpack_public_path__ + \"static/media/catSix.28eeb4c2.jpeg\";","export default __webpack_public_path__ + \"static/media/catSeven.a2868afd.jpeg\";","export default __webpack_public_path__ + \"static/media/catEight.8dd7b72b.jpeg\";","export default __webpack_public_path__ + \"static/media/catNine.31960918.jpeg\";","export default __webpack_public_path__ + \"static/media/catTen.fcd6ff0b.jpeg\";","export default __webpack_public_path__ + \"static/media/catEleven.780be413.jpeg\";","export default __webpack_public_path__ + \"static/media/catTwelve.0e923f06.jpeg\";","export default __webpack_public_path__ + \"static/media/catThirteen.9f911e87.jpeg\";","export default __webpack_public_path__ + \"static/media/catFourteen.db5bebb6.jpeg\";","export default __webpack_public_path__ + \"static/media/catFifteen.f13b3acc.jpeg\";","import Card from \"./Card\";\nimport { Char } from \"../types/customTypes\";\nimport createCharacter from \"../factoryFunctions/characterFactory\";\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box } from \"@mui/system\";\nimport Scoreboard from \"./Scoreboard\";\n\n// Import Character Images\nimport catOne from \"../assets/catOne.jpeg\";\nimport catTwo from \"../assets/catTwo.jpeg\";\nimport catThree from \"../assets/catThree.jpeg\";\nimport catFour from \"../assets/catFour.jpeg\";\nimport catFive from \"../assets/catFive.jpeg\";\nimport catSix from \"../assets/catSix.jpeg\";\nimport CatSeven from \"../assets/catSeven.jpeg\";\nimport catEight from \"../assets/catEight.jpeg\";\nimport catNine from \"../assets/catNine.jpeg\";\nimport catTen from \"../assets/catTen.jpeg\";\nimport catEleven from \"../assets/catEleven.jpeg\";\nimport catTwelve from \"../assets/catTwelve.jpeg\";\nimport catThirteen from \"../assets/catThirteen.jpeg\";\nimport catFourteen from \"../assets/catFourteen.jpeg\";\nimport catFifteen from \"../assets/catFifteen.jpeg\";\n\nconst Gameboard = () => {\n  // When Component's mounts, this arrayOfCharacters is set.\n  const [arrayOfCharacters, setArrayOfCharacters] = useState<Char[]>([]);\n\n  // On Component Mount - add Characters to arrayOfCharacters\n  useEffect(() => {\n    // Create Characters\n    let uhtred: Char = createCharacter(\"Uhtred\", catOne);\n    let beocca: Char = createCharacter(\"Beocca\", catTwo);\n    let leofric: Char = createCharacter(\"Leofric\", catThree);\n    let alfred: Char = createCharacter(\"Alfred\", catFour);\n    let brida: Char = createCharacter(\"Brida\", catFive);\n    let mildrith: Char = createCharacter(\"Mildrith\", catSix);\n    let iseult: Char = createCharacter(\"Iseult\", CatSeven);\n    let aelswith: Char = createCharacter(\"Aelswith\", catEight);\n    let ragnar: Char = createCharacter(\"Ragnar\", catNine);\n    let ubba: Char = createCharacter(\"Ubba\", catTen);\n    let hild: Char = createCharacter(\"Hild\", catEleven);\n    let Sihtric: Char = createCharacter(\"Sihtric\", catTwelve);\n    let Osferth: Char = createCharacter(\"Osferth\", catThirteen);\n    let Eadith: Char = createCharacter(\"Eadith\", catFourteen);\n    let Aldhelm: Char = createCharacter(\"Aldhelm\", catFifteen);\n\n    let tempArray: Char[] = [];\n\n    tempArray.push(\n      uhtred,\n      beocca,\n      leofric,\n      alfred,\n      brida,\n      mildrith,\n      iseult,\n      aelswith,\n      ragnar,\n      ubba,\n      hild,\n      Sihtric,\n      Osferth,\n      Eadith,\n      Aldhelm\n    );\n\n    setArrayOfCharacters((arrayOfCharacters) => tempArray);\n  }, []);\n\n  // Tells which characters (10 out of 15) will be displayed on the screen\n  const [chosenCharacters, setChosenCharacters] = useState<Char[]>([]);\n\n  // Holds the JSX.Element that is used to generate the Cards\n  const [cardsToDisplay, setCardsToDisplay] = useState<JSX.Element[]>([]);\n\n  // Keeps track of what characters the user has clicked before\n  const [clickedCharacters, setClickedCharacters] = useState<Char[]>([]);\n\n  // Keeps track of the user's latest click\n  const [latestClickedChar, setLastestClickedChar] = useState<Char>();\n\n  // Keeps track of user's current score\n  const [currentScore, setCurrentScore] = useState<number>(0);\n\n  // Keeps track of user's best score\n  const [bestScore, setBestScore] = useState<number>(0);\n\n  // Updates latestClickedChar state\n  const handleCharacterClick = (character: Char) => {\n    setLastestClickedChar((char) => character);\n  };\n\n  // Resets game (resets some state values to [], undefined and 0)\n  const resetRound = () => {\n    setClickedCharacters([]);\n    setLastestClickedChar(undefined);\n    setCurrentScore((currentScore) => 0);\n  };\n\n  // When the arrayOfCharacters is first assigned OR when the user clicks a character => randomly assign chosenCharacters that will display on screen\n  useEffect(() => {\n    // Make sure arrayOfCharacters's state has already updaded and is not undefined\n    if (arrayOfCharacters.length > 0) {\n      // Set logic for App to pick 10/15 available characters\n      let possibleIndexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n      let pickedIndexes: number[] = [];\n      let randomChosenCharacters: Char[] = [];\n\n      // Loop until 9 characters are picked\n      let desiredCharacters = 9;\n      while (desiredCharacters > 0) {\n        // Pick a random index and push it to pickedIndexes Array\n        let pickRandomIndex = Math.floor(\n          Math.random() * possibleIndexes.length\n        );\n        pickedIndexes.push(possibleIndexes[pickRandomIndex]);\n\n        // Remove the pickedIndex from the possibleIndexes array\n        let indexToRemove = possibleIndexes.indexOf(\n          possibleIndexes[pickRandomIndex]\n        );\n        possibleIndexes.splice(indexToRemove, 1);\n\n        desiredCharacters--;\n      }\n      // Loop over pickedIndexes and push the corresponding characters to randomChosenCharacters array\n      pickedIndexes.forEach((index) => {\n        randomChosenCharacters.push(arrayOfCharacters[index]);\n      });\n\n      setChosenCharacters((chosenCharacters) => randomChosenCharacters);\n    }\n  }, [arrayOfCharacters, clickedCharacters]);\n\n  // When chosenCharacters updated, update the screen with the chosenCharacters\n  useEffect(() => {\n    // Tells GameBoard Component which cards to display on the screen\n    const updateScreen = (chosenCharacters: Char[]) => {\n      // Create List Of Cards To Display on The Screen\n      let tempCards: JSX.Element[] = chosenCharacters.map((character) => {\n        return (\n          <Grid\n            item\n            xs={3}\n            sm={2}\n            m={1}\n            key={chosenCharacters.indexOf(character)}\n          >\n            <Card\n              handleCharacterClick={handleCharacterClick}\n              character={character}\n            />\n          </Grid>\n        );\n      });\n\n      // Inform component of which cards to display on the render method\n      setCardsToDisplay((cardsToDisplay) => tempCards);\n    };\n\n    updateScreen(chosenCharacters);\n  }, [chosenCharacters]);\n\n  // Update bestScore if currentScore > bestScore\n  useEffect(() => {\n    // Update Best Score if applicable\n    if (currentScore > bestScore) {\n      setBestScore(currentScore);\n    }\n  }, [currentScore, bestScore]);\n\n  // On every click, decide if user gets points or if game resets\n  useEffect(() => {\n    if (latestClickedChar !== undefined) {\n      // If user clicks the same character twice - reset Round\n      if (\n        clickedCharacters.some((char) => char.name === latestClickedChar.name)\n      ) {\n        resetRound();\n      } else {\n        // Add character to clickedCharacters array\n        setClickedCharacters((clickedCharacters) =>\n          clickedCharacters.concat(latestClickedChar)\n        );\n        // Increment user score\n        setCurrentScore((currentScore) => currentScore + 1);\n        /* Set state to undefined to allow state to change if user clicks the same character twice in a row \n        (otherwise, state would be the same and it would not trigger this useEffect since the array dependency would not change).*/\n        setLastestClickedChar((char) => undefined);\n      }\n    }\n  }, [latestClickedChar, clickedCharacters]);\n\n  return (\n    <Box>\n      <Grid container direction=\"row\">\n        <Scoreboard currentScore={currentScore} bestScore={bestScore} />\n        <Grid container item direction=\"row\" justifyContent=\"center\">\n          {[cardsToDisplay]}\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Gameboard;\n","import Gameboard from './components/Gameboard';\n\nfunction App() {\n  return (\n    <div>\n      <Gameboard/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}